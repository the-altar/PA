import { iEffect } from "../../interfaces"
import { Effect } from "./baseEffect"
import {Types, effectTargetBehavior} from "../../enums"
import { Character } from "../character";
import {Arena} from "../../arena";

interface iInvulnerabilityParams {
    type:Types
}

export class Invulnerability extends Effect {
    private invulnerabilityType:Types 

    constructor(data:iEffect, caster:number){
        super(data, caster)
        this.invulnerabilityType = data.invulnerabilityType
    }

    public makeInvulnerable(params:iInvulnerabilityParams, char:Character){
        const {type} = params 
        char.setInvulnerability(type)
    }


    public getInvulnerabilityType():Types{
        return this.invulnerabilityType
    }

    public execute(targets: Array<Character>, world:Arena, skillType: { [key: string]: number }): boolean {

        const params = {type: this.invulnerabilityType}
        this.effectTargetApplication(params, this.makeInvulnerable, targets, world)
        if (this.duration <= 0) return true
        
        return false
    }
}