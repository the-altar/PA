import { iEffect } from "../../interfaces"
import { Effect } from "./baseEffect"
import {Types, effectTargetBehavior} from "../../enums"
import { Character } from "../character";
import {Arena} from "../../arena";

export class Invulnerability extends Effect {
    private invulnerabilityType:Types 

    constructor(data:iEffect){
        super(data)
        this.invulnerabilityType = data.invulnerabilityType
    }

    public getInvulnerabilityType():Types{
        return this.invulnerabilityType
    }

    public execute(targets: Array<Character>, world:Arena, skillType: { [key: string]: number }): boolean {
        this.tick++
        if (this.tick % 2 === 0) return false

        this.delay -= 1
        if (this.delay >= 0) return false
        
        this.duration -= 1;
        
        switch (this.behavior) {
            case effectTargetBehavior.Default: {
                for (const char of targets) {
                    char.setInvulnerability(this.invulnerabilityType)
                }
            } break;

            case effectTargetBehavior.OnlyOne: {
                targets[0].setInvulnerability(this.invulnerabilityType)
            } break;

            case effectTargetBehavior.AllOthers: {
                for (const char of targets.slice(1, targets.length)) {
                    char.setInvulnerability(this.invulnerabilityType)
                }
            } break
        }

        if (this.duration <= 0) return true
        return false
    }
}