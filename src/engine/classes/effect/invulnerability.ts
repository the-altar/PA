import { Effect } from "./base"
import { Types, BuffTypes, triggerClauseType } from "../../enums"
import { Character } from "../character";
import { Skill } from "../skill";

export class Invulnerability extends Effect {
    private invulnerabilityType: Types

    constructor(data: any, caster: number) {
        super(data, caster)
        this.invulnerabilityType = data.invulnerabilityType
    }

    public functionality(char: Character, origin:Skill) {
        this.triggered = true
        //console.log("Making a character invulnerable to: "+ this.invulnerabilityType)
        char.setBuff({
            buffType:BuffTypes.Invulnerability,
            skillType: this.invulnerabilityType
        })
    }

    protected generateToolTip(){
        let extra = ''
        if(this.invulnerabilityType !== Types.Any){
            extra = ` to ${Types[this.invulnerabilityType]} skills`
        }

        if(this.triggerClause !== triggerClauseType.None && !this.triggered){

            switch(this.triggerClause){
                case triggerClauseType.onKnockOut: {
                    this.message = `If Knocked out this character will become invulnerable${extra}` 
                }
            }
            
        } else {
            this.message = `This character is invulnerable${extra}`
        }
        
    }
}