import { Effect } from "./base"
import { Types, BuffTypes, triggerClauseType } from "../../enums"
import { Character } from "../character";
import { Skill } from "../skill";

export class Invulnerability extends Effect {
    private invulnerabilityType: Types

    constructor(data: any, caster: number) {
        super(data, caster)
        this.invulnerabilityType = data.invulnerabilityType
    }

    public functionality(char: Character, origin:Skill) {
        this.triggered = true
        //console.log("Making a character invulnerable to: "+ this.invulnerabilityType)
        char.setBuff({
            buffType:BuffTypes.Invulnerability,
            skillType: this.invulnerabilityType
        })
    }

    protected generateToolTip(){
        if(this.triggerClause !== triggerClauseType.None && !this.triggered){

            switch(this.triggerClause){
                case triggerClauseType.onKnockOut: {
                    this.message = `If Knocked out an invulnerability effect will be triggered` 
                }
            }
            
        } else {
            if(this.delay > 0){
                this.message = `This character will become invulnerable in ${this.delay}`
            } else {
                this.message = `This character is invulnerable` 
            }
        }
        
    }
}