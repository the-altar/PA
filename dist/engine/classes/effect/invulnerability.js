"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invulnerability = void 0;
const base_1 = require("./base");
const enums_1 = require("../../enums");
class Invulnerability extends base_1.Effect {
    constructor(data, caster) {
        super(data, caster);
        this.invulnerabilityType = data.invulnerabilityType;
    }
    functionality(char, origin) {
        this.triggered = true;
        //console.log("Making a character invulnerable to: "+ this.invulnerabilityType)
        char.setBuff({
            buffType: enums_1.BuffTypes.Invulnerability,
            skillType: this.invulnerabilityType
        });
    }
    generateToolTip() {
        let extra = '';
        if (this.invulnerabilityType !== enums_1.Types.Any) {
            extra = ` to ${enums_1.Types[this.invulnerabilityType]} skills`;
        }
        if (this.triggerClause !== enums_1.triggerClauseType.None && !this.triggered) {
            switch (this.triggerClause) {
                case enums_1.triggerClauseType.onKnockOut: {
                    this.message = `If Knocked out this character will become invulnerable${extra}`;
                }
            }
        }
        else {
            this.message = `This character is invulnerable${extra}`;
        }
    }
}
exports.Invulnerability = Invulnerability;
//# sourceMappingURL=invulnerability.js.map